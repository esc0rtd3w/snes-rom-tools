This contains some important stuff, for once, so listen up.

This is my MML editing tool which should be used for porting music to Super Mario World.  It supports fixing MML files generated by TinyMM, raising and lowering all the octaves in a channel at once, raising and lowering all the volume commands at once, inserting the Hex Commands, inserting the L command safely (i.e. without accidentally replacing a volume or instrument designation, for example), efficient label looping, a drum channel fixer, and a small player that will allow you to listen to a sample of every instrument.

WHAT'S NEW IN VERSION SOMETHING-OR-OTHER:

1. Label looping shouldl be perfect now.  Before, if you had "a[a]a" and tried to label loop a, you'd get "(1)[(1)](1)" which is invalid.  It will now not count anything within "[]" as loopable.

2. VERY minimal support for 3ML files has been added; see below for details.

3. The volume changer has been updated to allow changes to be applied to volumes of a single digit.  Why didn't I do this before? ¯\(º_o)/¯ 

4. Fixed the panning slide command.  Now it actually, y'know, slides.  Yeah.  Dunno how I missed that one.

5. Made octave switching optional since TinyMM was updated.

6. And...uh...I think that's it, other than tidying up some code.


IMPORTANT STUFF
| | | | | | | |
v v v v v v v v

1) This program is still essentially in its beta stages (and will likely remain that way), so there are bound to be a few glitches here and there.  
2) The octave raiser and lowerer, the L command inserter, and especially the drum fixer work best modifying one channel at a time.
3) The drum fixer WILL ONLY WORK IF THE L COMMAND HAS NOT BEEN APPLIED TO THAT SECTION.  For example, the program will apply the drum instruments to something like "d8c8f+8a8" but it will not apply them to "dcf+a."  In other words, the program will only add an instrument designation to a note that has a valid length after it.
4) The volume changer will not change a volume if it is the very first thing in the text box.  I don't know why.  If this is an issue, then just put a space before it.
5) The Label Looper will not detect a group of notes as match if it is split by a line break, a space, etc.
6) I doubt that very many things will work with flat notes (for example b-).  Use sharps whenever possible (tinyMM does this automatically).  Likewise, everything will work much smoother if everything is lowercase.
7) The drum fixer will not tell the difference between an octave 2 C and an octave 3 C.  In other words, two drums cannot share the same note value, regardless of octave differences.
8)The program will not ignore anything after comment tags (;).  If you have any text after those, then they may cause issues.  It's not likely, but just be aware just in case.
9) Every input should be in decimal, not hex.
10) Every input should be in decimal, not hex.
11)Every input should be in DECIMAL, AND NOT HEX!


Now that that's out of the way, I can get to the descriptions.

Fix File:
This button is used to fix an mml file created by tinyMM and create something that can be used by SMW.  It fixes the line breaks, and channel headers.  If the optional checkbox at the bottom-right of the main window is checked, the octaves will be swapped as well.

Fix 3ML File:
This feature is...buggy.  I originally added it in for my own personal use but figured that it couldn't hurt to release it.  Use with extreme caution.  Only use it if, for some reason, a normal file generated by TinyMM won't work.  Note that you should use "MabiMML" style for this function.

Raise octaves:  
This will add a ">" to the start of the file and then search for and increase every octave in the file, as long as doing so would not create any "o7" octaves.

Lower octaves: 
This will add a "<" to the start of the file and then search for and increase every octave in the file, as long as doing so would not create any "o0" octaves. Yay for shameless copying and pasting.

Change all Volume Commands:  
This will search for every volume command in the file (only those starting with v, not w) and decrease or increase them by a certain amount.  If it found that one went above 255 or below 0, it will automatically limit it and ask for confirmation before inserting the result back into the text box.  One thing that I should note is that it the last thing in the text box should not be a volume command, but that shouldn't ever come up.

Hex Commands:
This will allow you to insert a hex command into the file with your specifications.  The commands included are: ADSR, echo, pan fade, pitch slide, tune, tempo fade, and volume fade.

View Sample Usage:  This brings up a window that shows what samples are used by what instruments.  Useful if you are using Sample Tool.

Insert L command:
This will remove every instance of a certain note length and add the appropriate L command to the beginning of the file.

Label Loop:
This button will first search for every instance of what is contained in the box below (which you change by highlighting text in the text box) and then replaces it all with a label that does not already exist in the file.  It also inserts the appropriate "intro." (I.E. (#)[original note data])  One thing to note is that it will be up to you to further loop any labels. For example, you may need to change (1)(1)(1)(1) to (1)4. It's a still a whole lot easier this way, though.

Drum Fixer:
This will scan the file for all the different notes it contains, and then ask you for an instrument to use for those note values.  It will then insert the instrument designation you chose in front of the notes it found.

Listen to Samples:
This will bring up a window that has a button corresponding to every instrument in Super Mario World.  Click on each to hear its instrument.

View Text Storer:
This will bring up a window that has 9 text boxes in it that you can use to store your text.  Feel free to close it when you don't need it; as long as you don't close the main window you won't lose any of it.  Its main use is for storing  the eight different channels in the first 8 text boxes, and a back up of your file in the ninth, but you can use it for whatever you need to.  Note that it uses # to figure out where one channel ends and another begins, so if you don't have channel designations then this will probably fail.



And I think that that's pretty much it.  Have fun porting your songs to SMW!

Legal notice:  I don't own Super Mario World.  I don't claim to own Super Mario World.  I will never claim to own Super Mario World.  I am not affiliated with Nintendo in any way.  There.  Can I go home now?